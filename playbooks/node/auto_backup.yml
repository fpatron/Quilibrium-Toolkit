- name: Automatic backup configuration
  hosts: "{{ target }}"
  vars:
    zip_command: >-
      {%- if auto_backup_zip_password is defined and auto_backup_zip_password -%}
        {%- if auto_backup_keep_store is defined and auto_backup_keep_store == True -%}
          zip -r -e $zipfile {{ node_path }}/ceremonyclient/node/.config -P {{ auto_backup_zip_password }}
        {%- else -%}
          zip -r -e $zipfile {{ node_path }}/ceremonyclient/node/.config -x "{{ node_path }}/ceremonyclient/node/.config/store/*" -P {{ auto_backup_zip_password }}
        {%- endif -%}
      {%- else -%}
        {%- if auto_backup_keep_store is defined and auto_backup_keep_store == True -%}
          zip -r $zipfile {{ node_path }}/ceremonyclient/node/.config
        {%- else -%}
          zip -r $zipfile {{ node_path }}/ceremonyclient/node/.config -x "{{ node_path }}/ceremonyclient/node/.config/store/*"
        {%- endif -%}
      {%- endif -%}

  tasks:
    - name: Check backup parameters
      fail:
        msg: "No backup configuration is set up"
      when: not(auto_backup_type)

    - become: true
      apt:
        name:
          - cron
          - zip
          - curl
        state: present

    - name: Install rclone
      become: true
      shell: |
        which rclone
        if [ $? != 0 ]
        then
          curl -s https://rclone.org/install.sh | sudo bash > /dev/null
        fi

    - name: Configure rclone
      shell: |
        mkdir -p $HOME/.config/rclone
        echo > $HOME/.config/rclone/rclone.conf

        echo "[ftp]" >> $HOME/.config/rclone/rclone.conf
        echo "type = ftp" >> $HOME/.config/rclone/rclone.conf
        echo "host = {{ auto_backup_ftp_host | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo "port = {{ auto_backup_ftp_port | default(21) }}" >> $HOME/.config/rclone/rclone.conf
        echo "user = {{ auto_backup_ftp_user | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo "pass = $(rclone obscure {{ auto_backup_ftp_pass | default('') }})" >> $HOME/.config/rclone/rclone.conf
        echo '\n' >> $HOME/.config/rclone/rclone.conf

        echo "[dropbox]" >> $HOME/.config/rclone/rclone.conf
        echo "type = dropbox" >> $HOME/.config/rclone/rclone.conf
        echo "token = {{ auto_backup_dropbox_token | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo '\n' >> $HOME/.config/rclone/rclone.conf

        echo "[gdrive]" >> $HOME/.config/rclone/rclone.conf
        echo "type = drive" >> $HOME/.config/rclone/rclone.conf
        echo "scope = drive" >> $HOME/.config/rclone/rclone.conf
        echo "skip_gdocs = true" >> $HOME/.config/rclone/rclone.conf
        echo "token = {{ auto_backup_gdrive_token | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo "team_drive = " >> $HOME/.config/rclone/rclone.conf
        echo '\n' >> $HOME/.config/rclone/rclone.conf

        echo "[onedrive]" >> $HOME/.config/rclone/rclone.conf
        echo "type = onedrive" >> $HOME/.config/rclone/rclone.conf
        echo "token = {{ auto_backup_onedrive_token | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo "drive_id = {{ auto_backup_onedrive_drive_id | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo "drive_type = {{ auto_backup_onedrive_drive_type | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo '\n' >> $HOME/.config/rclone/rclone.conf

        echo "[storj]" >> $HOME/.config/rclone/rclone.conf
        echo "type = storj" >> $HOME/.config/rclone/rclone.conf
        echo "access_grant = {{ auto_backup_storj_access_grant | default('') }}" >> $HOME/.config/rclone/rclone.conf
        echo '\n' >> $HOME/.config/rclone/rclone.conf

    - name: Create local backup script
      shell: |
        echo 'zipfile="/tmp/$(hostname)_$(date +"%Y-%m-%d_%H-%M-%S").zip"
        {{ zip_command }}
        mkdir -p {{ auto_backup_remote_path }}
        rclone --min-age 7d delete {{ auto_backup_remote_path }}
        rclone copy $zipfile {{ auto_backup_remote_path }}
        rm $zipfile' > {{ node_path }}/backup.sh
        chmod u+x {{ node_path }}/backup.sh
      when: auto_backup_type == 'local'

    - name: Create remote backup script
      shell: |
        echo 'zipfile="/tmp/$(hostname)_$(date +"%Y-%m-%d_%H-%M-%S").zip"
        {{ zip_command }}
        rclone mkdir {{ auto_backup_type }}:{{ auto_backup_remote_path }}
        rclone --min-age 7d delete {{ auto_backup_type }}:{{ auto_backup_remote_path }}
        rclone copy --transfers 10 --checkers 20 --disable-http2 --retries 1 $zipfile {{ auto_backup_type }}:{{ auto_backup_remote_path }}
        rm $zipfile' > {{ node_path }}/backup.sh
        chmod u+x {{ node_path }}/backup.sh
      when: auto_backup_type != 'local'

    - name: Launch rclone once time
      shell: "{{ node_path }}/backup.sh"

    - name: Add rclone to cron
      shell: |
        cron_command="@daily {{ node_path }}/backup.sh"
        current_crontab=$(crontab -l 2>/dev/null)
        echo "$current_crontab" | grep -qF "$cron_command" || (crontab -l 2>/dev/null; echo "$cron_command") | crontab -